'''
У Кати насыщенный день на работе. Ей надо передать n разных
договоров коллегам. Все встре- чи происходят на разных этажах,
а между этажами можно перемещаться только по лестничным пролетам — считается,
что это улучшает физическую форму сотрудников.
Прохождение каждого пролета занимает ровно 1 минуту.

Сейчас Катя на парковочном этаже, планирует свой маршрут.
Коллег можно посетить в любом порядке, но один из них покинет
офис через t минут. С парковочного этажа лестницы нет — только лифт,
на котором можно подняться на любой этаж.

В итоге план Кати следующий:
Подняться на лифте на произвольный этаж. Считается, что лифт
поднимается на любой этаж за 0 минут.
Передать всем коллегам договоры, перемещаясь между этажами по лестнице.
Считается, что договоры на этаже передаются мгновенно.
В первые t минут передать договор тому коллеге, который планирует уйти.
Пройти минимальное количество лестничных пролетов.
Помогите Кате выполнить все пункты ее плана.

Формат входных данных:
В первой строке вводятся целые положительные числа
n и t  (2≤n,t≤100) — количество сотрудников и время,
когда один из сотрудников покинет офис (в минутах).
В следующей строке n чисел — номера этажей, на которых находятся сотрудники.
Все числа различны и по абсолютной величине не превосходят 100.
Номера этажей даны в порядке возрастания.
В следующей строке записан номер сотрудника, который уйдет через t минут.

Формат выходных данных:
Выведите одно число — минимально возможное число лестничных пролетов,
которое понадобится пройти Кате.

Замечание
В первом примере времени достаточно, чтобы Катя
поднялась по этажам по порядку.
Во втором примере Кате понадобится подняться к
уходящему сотруднику, а потом пройти всех остальных — например,
в порядке {1,2,3,4,6}

input:
5  5
1  4  9  16  25
2

output:
24

input:
6  4
1  2  3  6  8  25
5

output
31
'''


# count_employee, time_out = list(map(int, input().split()))
# floor_numbers = list(map(int, input().split()))
# leave_employee = int(input())


def min_floors(count_employee, time_out, floor_numbers, leave_employee):
    leave_employee -= 1
    all_floors_one_way = floor_numbers[-1] - floor_numbers[0]

    if time_out >= abs(floor_numbers[-1] - floor_numbers[leave_employee]):
        return all_floors_one_way
    elif time_out >= abs(floor_numbers[leave_employee] - floor_numbers[0]):
        return all_floors_one_way
    else:
        result1 = all_floors_one_way + floor_numbers[-1] - floor_numbers[leave_employee]
        result2 = all_floors_one_way + floor_numbers[leave_employee] - floor_numbers[0]
        return(min(result1, result2))


# print(min_floors(count_employee, time_out, floor_numbers, leave_employee))

# Тест - успеет дойти пешком снизу
assert min_floors(5, 5, [1, 4, 9, 16, 25], 2) == 24
# Тест - нужно подниматься - первый этаж ближе последнего
assert min_floors(6, 4, [1, 2, 3, 6, 8, 25], 5) == 31
# Тест - нужно подниматься - последний этаж ближе первого
assert min_floors(6, 1, [1, 4, 6, 7, 8, 9], 4) == 10
# Тест - успеет дойти пешком сверху
assert min_floors(4, 2, [1, 4, 6, 7], 3) == 6
# Тест - успеет дойти пешком сверху
assert min_floors(4, 2, [3, 4, 6, 8], 3)

# Тут куча тестов от безысходности, включая отриц числа
assert min_floors(3, 2, [2, 3, 7], 3) == 5
assert min_floors(8, 2, [1, 2, 3, 4, 5, 6, 7, 8], 4) == 10
assert min_floors(8, 3, [1, 2, 3, 4, 5, 6, 7, 8], 4) == 7
assert min_floors(8, 2, [1, 2, 3, 4, 5, 6, 7, 8], 8) == 7
assert min_floors(8, 2, [1, 2, 3, 4, 5, 6, 7, 8], 6) == 7
assert min_floors(8, 1, [1, 2, 3, 4, 5, 6, 7, 8], 6) == 9
assert min_floors(9, 2, [1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 12
assert min_floors(9, 5, [1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 8
assert min_floors(15, 3, [3, 9, 10, 15, 18, 23, 35, 48, 52, 63, 67, 71, 76, 80, 82], 7) == 111
assert min_floors(8, 2, [-8, -7, -6, -5, -4, -3, -2, -1], 4) == 10
# Самый интересный тест, наличие нулевого этажа
assert min_floors(5, 1, [-2, 0, 1, 3, 4], 3) == 9
