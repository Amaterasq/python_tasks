'''
У Кости есть бумажка, на которой написано n чисел.
Также у него есть возможность не больше, чем k раз,
взять любое число с бумажки, после чего закрасить одну
из старых цифр, а на ее месте написать новую произвольную цифру.
На какое максимальное значение Костя сможет увеличить сумму
всех чисел на листочке?

Формат входных данных:
В первой строке входного файла даны два целых числа n,k —
количество чисел на бумажке и ограничение на число операций. 
(1≤n≤1000,1≤k≤10^4).
Во второй строке записано n чисел ai — числа на бумажке
(1≤ai≤10^9)

Формат выходных данных:
В выходной файл выведите одно число — максимальную разность
между конечной и начальной суммой.

Замечание
В первом примере Костя может изменить две единицы на две девятки,
в результате чего сумма чисел увеличится на 1616.
Во втором примере Костя меняет число 8585 на 9595.
В третьем примере можно ничего не менять.
'''

# count_nums, count_operations = list(map(int, input().split()))
# nums = list(input().split())


def func(count_nums, count_operations, nums):
    operations = []

    # Для кажого числа в списке чисел:
    for number in nums:
        # Для каждого разряда в числе
        for razryad in range(len(str(number))):
            # Получить ЦИФРУ по разряду
            digit = str(number)[-(razryad + 1)]
            # Высчитать разницу, если эту цифру в этом разряде поменять на 9
            operation = 10 ** razryad * (9 - int(digit))
            # Добавить результат в список
            operations.append(operation)
    # Отсортировать список по убыванию
    operations.sort(reverse=True)
    # Вернуть сумму по количеству разрешенных операций в кейсе
    return sum(operations[:count_operations])


# print(func(count_nums, count_operations, nums))

assert func(5, 2, [1, 2, 1, 3, 5]) == 16  # Пример 1
assert func(3, 1, [99, 5, 85]) == 10      # Пример 2
assert func(1, 10, [9999]) == 0           # Пример 3
assert func(6, 2, [899, 99, 81, 19, 5, 1]) == 180
